// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Icon {
  //Proje ve default kullanici avatar iconlarını barindiran tablo. 
  //Kullanıcılar manuel icon da ekleyebilirler.
  //bu iconları ayrı bir folder'da tutup path kısmına sadece dosya adını ekleyeceğiz.
  //eklenen dosyalar otomatik rename edilecek.
  id        Int    @id @unique @default(autoincrement())
  path      String
  icontype  String
  cretor    String?
  isSystem  Int

}

model board {
  //board ve query
  id Int  @id @unique @default(autoincrement())
  query String?

}

model Board_Project {
  boardid Int @unique
  projectid  Int

}

model Customfield {
  //customfield'lar ve tiplerini tuttuğumuz tablo. option ve value için farklı tablo olacak. 
  id            Int         @id @unique @default(autoincrement())
  cfname        String      @unique
  description   String?
  defaultvalue  String?
  fieldtype     String
  cfkey         String      @unique

}